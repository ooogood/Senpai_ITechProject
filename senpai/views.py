from django.contrib.auth.models import User
from django.shortcuts import render
from django.http import HttpResponse, Http404, HttpResponseRedirect
from django.views.generic.base import View

from senpai import models
from senpai.forms import UserForm, UserProfileForm, ModuleForm
from senpai.models import UserProfile, Module, Note, Enrollment, Comment, Like
## import modelForms
from django.shortcuts import redirect
from django.urls import reverse
## import userForms
from django.contrib.auth import authenticate, login, logout
from django.utils.decorators import method_decorator
from django.contrib.auth.decorators import login_required
## helper
import os, mimetypes

from senpai.templatetags.senpai_template_tags import get_sorted_notes, get_home_modules, get_comments, get_mynote_notes, \
    get_mymodule_usermodules, get_mymodule_othermodules, get_all_module_list, is_user_admin, gen_admin_key
import urllib
from urllib import parse


# Create your views here.
# home page
class HomePage(View):
    @method_decorator(login_required)
    def get(self, request):
        if request.is_ajax():
            context_dict = get_home_modules(request.user, request.GET['search'])
            return render(request, 'senpai/home_modules.html', context=context_dict)
        context_dict = get_home_modules(request.user)
        # put extra info: is this an admin login
        context_dict['is_admin'] = is_user_admin(request.user)
        return render(request, 'senpai/home.html', context=context_dict)


# module page
class ModulePage(View):
    @method_decorator(login_required)
    def get(self, request, module_name_slug):
        context_dict = {}
        try:
            module = Module.objects.get(slug=module_name_slug)
            context_dict['module'] = module
        # context_dict['notes'] and context_dict['note_dict'] will be generated by calling get_sorted_notes in html
        except Module.DoesNotExist:
            context_dict['module'] = None
        # if it is ajax request, only return the note list
        if request.is_ajax():
            sort_type = request.GET['sort_type']
            result_dict = get_sorted_notes(module, sort_type)
            return render(request, 'senpai/notelist.html', context=result_dict)
        context_dict['all_modules'] = Module.objects.all().order_by('name')
        # put extra info: is this an admin login
        context_dict['is_admin'] = is_user_admin(request.user)
        return render(request, 'senpai/module.html', context=context_dict)


@login_required
def upload_note(request, module_name_slug):
    file = request.FILES.get('file', False)
    if file != False:
        module = Module.objects.get(slug=module_name_slug)
        new_note = Note.objects.create(module=module, user=request.user, file=file)
        new_note.save()
    return redirect(reverse('senpai:show_module',
                            kwargs={'module_name_slug': module_name_slug}))


# note page
class NotePage(View):
    @method_decorator(login_required)
    def get(self, request, note_id):
        context_dict = {}
        if request.is_ajax():
            note = Note.objects.get(id=note_id)
            # add a comment to this note
            c = Comment.objects.create(note=note, user=request.user, content=request.GET['txt'])
            c.save()
            result_dict = get_comments(note, request.user)
            return render(request, 'senpai/commentlist.html', context=result_dict)
        try:
            context_dict['note'] = Note.objects.get(id=note_id)
            context_dict['module'] = context_dict['note'].module
            like = Like.objects.filter(note=context_dict['note'])
            context_dict['likes'] = like.count()
            context_dict['liked'] = like.filter(user=request.user).count()
        except Note.DoesNotExist:
            context_dict['module'] = None
            context_dict['note'] = None
            context_dict['likes'] = None
            context_dict['liked'] = None
        # put extra info: is this an admin login
        context_dict['is_admin'] = is_user_admin(request.user)
        return render(request, 'senpai/note.html', context=context_dict)


@login_required
def note_like_clicked(request, note_id):
    context_dict = {}
    note = Note.objects.get(id=note_id)
    liked = Like.objects.filter(note=note).filter(user=request.user).count()
    l = Like.objects.get_or_create(user=request.user, note=note)[0]
    if liked == 0:
        # like
        note.likes += 1
        note.save()
        l.save()
    else:
        # dislike
        note.likes -= 1
        note.save()
        l.delete()
    like = Like.objects.filter(note=note)
    context_dict['likes'] = like.count()
    context_dict['liked'] = like.filter(user=request.user).count()
    return render(request, 'senpai/note_like_info.html', context=context_dict)


@login_required
def note_download(request, note_id):
    note = Note.objects.get(id=note_id)
    if os.path.exists(note.file.path):
        with open(note.file.path, 'rb') as fh:
            mime_type, _ = mimetypes.guess_type(note.file.path)
            response = HttpResponse(fh.read(), content_type=mime_type)
            response['Content-Disposition'] = 'attachment; filename=' + note.file.name
            return response
    raise Http404


# user - my note
class Mynote(View):
    @method_decorator(login_required)
    def get(self, request):
        context_dict = {}
        result_dict = get_mynote_notes(request.user)

        context_dict['notes'] = result_dict['notes']
        context_dict['user'] = request.user
        context_dict['comments'] = result_dict['comments']
        context_dict['uf_type'] = 'mynotes'
        # if it is ajax request, only return the note list
        if request.is_ajax():
            need_del_note = request.GET.get('noteid')
            # there should add delete file lines
            if Note.objects.filter(id=need_del_note).exists():
                file = Note.objects.get(id=need_del_note).file
                file.delete()
                Note.objects.filter(id=need_del_note).delete()
            result_dict = get_mynote_notes(request.user)
            return render(request, 'senpai/mynote_notes.html', context=result_dict)
        response = render(request, 'senpai/mynote.html', context=context_dict)
        return response


# user - mylike
@login_required
def mylike(request):
    context_dict = {}
    context_dict['uf_type'] = 'mylikes'

    if request.user.is_authenticated:
        # get note_list
        like_list = Like.objects.filter(user=request.user)
        note = []
        for likes in like_list:
            note.append(likes.note)
        comment = {}
        for n in like_list:
            comment[n.note.id] = Comment.objects.filter(note=n.note).count()

        context_dict['note'] = like_list
        context_dict['user'] = request.user
        context_dict['comments'] = comment
    else:
        return render(request, 'senpai/login_error.html')
    response = render(request, 'senpai/mylike.html', context=context_dict)
    return response


# user - mymodule
@login_required
def mymodule(request):
    context_dict = {}
    context_dict['uf_type'] = 'mymodules'
    if request.is_ajax():
        # only do the action when refreshing user block
        if request.GET.get('block') == 'user':
            action_type = request.GET.get('action_type')
            module_id = request.GET.get('module_id')
            this_module = Module.objects.get(id=module_id)
            if action_type == 'select':
                if not Enrollment.objects.filter(module=this_module, user=request.user).exists():
                    e = Enrollment.objects.get_or_create(module=this_module, user=request.user)[0]
                    e.save()
            elif action_type == 'delete':
                if Enrollment.objects.filter(module=this_module, user=request.user).exists():
                    Enrollment.objects.filter(module=this_module, user=request.user).delete()
            return render(request, 'senpai/mymodule_usermodules.html', context=get_mymodule_usermodules(request.user))
        else:
            return render(request, 'senpai/mymodule_othermodules.html', context=get_mymodule_othermodules(request.user))

    return render(request, 'senpai/mymodule.html', context=context_dict)


def testFunction(request):
    pass

# main entry of sign in/up page
def signinup(request):
    context_dict = {}
    context_dict['signin_errmsg'] = ''
    context_dict['signup_errmsg'] = ''
    # if this is a sign in request
    if request.method == 'POST' and request.POST.get('signin_form') == 'submit':
        username = request.POST.get('username')
        password = request.POST.get('password')
        user = authenticate(username=username, password=password)
        if user:
            if user.is_active:
                login(request, user)
                return redirect(reverse('senpai:home'))
            else:
                context_dict['signin_errmsg']="Your senpai account is disabled."
        else:
            context_dict['signin_errmsg']=(f"Invalid signin details: {username}, {password}")
    # if this is a sign up request
    elif request.method == 'POST' and request.POST.get('signup_form') == 'submit':
        user_form = UserForm(data=request.POST)
        profile_form = UserProfileForm(data=request.POST)

        if user_form.is_valid() and profile_form.is_valid():
            # render form into objects without saving
            user = user_form.save(commit=False)
            user.set_password(user.password)
            profile = profile_form.save(commit=False)

            # Get the user input key from form
            getKey = profile.admin_key
            # Access to judgement
            try:
                # if user input admin key
                if getKey:
                    admin = UserProfile.objects.get(admin_key=getKey)
                    # auto generate new admin key for old admin and new admin
                    gen_admin_key( admin )
                    admin.save()
                    gen_admin_key( profile )
                    is_admin = 1
                else:
                    # create a non-admin account
                    is_admin = 0
                profile.is_admin = is_admin
                user.save()
                profile.user = user
                profile.save()
                # login and redirect to home if sign up successful
                login(request, user)
                return redirect(reverse('senpai:home'))
            except UserProfile.DoesNotExist:
                # cannot find a adminkey like this.
                context_dict['signup_errmsg'] = "Invalid admin key supplied."
        else:
            context_dict['signup_errmsg'] = user_form.errors.as_text() + profile_form.errors.as_text()
    # if there is no sign in or sign up request
    context_dict['user_form'] = UserForm()
    context_dict['profile_form'] = UserProfileForm()
    return render(request, 'senpai/signinup.html', context=context_dict)


@login_required
def user_logout(request):
    logout(request)
    return redirect(reverse('senpai:home'))


@login_required
def genAdminKey(request):
    user = request.user
    statusAdmin = UserProfile.objects.get(user=user).is_admin
    if statusAdmin == 0:
        return redirect(reverse('senpai:home'))
    """This function generate 10 character long hash"""

    current_user = request.user
    status = UserProfile.objects.get(user=current_user)
    gen_admin_key( status )
    status.save()
    context_dict = {'key': status.admin_key}
    return render(request, 'senpai/generateKey.html', context=context_dict)

@login_required
def module_management(request):
    user = request.user
    status = UserProfile.objects.get(user=user).is_admin
    context_dict = {}
    if status == 0:
        return redirect(reverse('senpai:home'))

    if request.is_ajax():
        action_type = request.GET.get('action_type')
        if action_type == 'add':
            module_name = request.GET.get('module_name')
            m = Module.objects.get_or_create(name=module_name)[0]
            m.save()
        elif action_type == 'delete':
            module_id = request.GET.get('module_id')
            if Module.objects.filter(id=module_id).exists():
                Module.objects.filter(id=module_id).delete()
        return render(request, 'senpai/management_module_list.html', context=get_all_module_list())
    return render(request, 'senpai/module-manage.html', context=context_dict)
